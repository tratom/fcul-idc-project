[
    {
        "id": "acebf30b628324b0",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "de5ee2193d03dd1b",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mosquitto",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "f77c186364b39603",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "postgres-db",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "health",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "postgres",
        "userFieldType": "str",
        "password": "root",
        "passwordFieldType": "str"
    },
    {
        "id": "9fecdf3190a69c9d",
        "type": "ui_group",
        "name": "dashboard",
        "tab": "15b8b5c3b96ba416",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "15b8b5c3b96ba416",
        "type": "ui_tab",
        "name": "User Data",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "8bd336bf9cb2e6f1",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "dd68ec0c1ac0b2f7",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "62f15109aa2f90a2",
        "type": "ui_group",
        "name": "dasboard",
        "tab": "dd68ec0c1ac0b2f7",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b1abe26a640988f8",
        "type": "ui_group",
        "name": "Thresholds",
        "tab": "dd68ec0c1ac0b2f7",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "bad2002f2ef54b31",
        "type": "debug",
        "z": "acebf30b628324b0",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 900,
        "wires": []
    },
    {
        "id": "0b2881757468b458",
        "type": "ui_ui_control",
        "z": "acebf30b628324b0",
        "name": "",
        "events": "all",
        "x": 80,
        "y": 600,
        "wires": [
            [
                "6d3919916a4145f1",
                "3ee1584cd141907e",
                "8efa6edb90320d35"
            ]
        ]
    },
    {
        "id": "6d3919916a4145f1",
        "type": "ui_form",
        "z": "acebf30b628324b0",
        "name": "user-data",
        "label": "User Data",
        "group": "9fecdf3190a69c9d",
        "order": 0,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Age",
                "value": "age",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Height",
                "value": "height",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Weight",
                "value": "weight",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Gender",
                "value": "gender",
                "type": "number",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "age": "",
            "height": "",
            "weight": "",
            "gender": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 240,
        "y": 560,
        "wires": [
            [
                "cbe882a2a82e4d22"
            ]
        ]
    },
    {
        "id": "c861c111c0cacc30",
        "type": "postgresql",
        "z": "acebf30b628324b0",
        "name": "",
        "query": "INSERT INTO user_data (gender, age, weight, height)\nVALUES ($1, $2, $3, $4)",
        "postgreSQLConfig": "f77c186364b39603",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 570,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "cbe882a2a82e4d22",
        "type": "function",
        "z": "acebf30b628324b0",
        "name": "function 2",
        "func": "msg.params = [\n    msg.payload.gender,\n    msg.payload.age,\n    msg.payload.weight,\n    msg.payload.height\n];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 560,
        "wires": [
            [
                "c861c111c0cacc30"
            ]
        ]
    },
    {
        "id": "8a6e9e026ddf0cd9",
        "type": "postgresql",
        "z": "acebf30b628324b0",
        "name": "",
        "query": "SELECT * FROM user_data LIMIT 1;",
        "postgreSQLConfig": "f77c186364b39603",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 430,
        "y": 700,
        "wires": [
            [
                "dcbacccabfd6a2e5",
                "758ca2d032400175"
            ]
        ]
    },
    {
        "id": "47a287049a3d14b7",
        "type": "ui_form",
        "z": "acebf30b628324b0",
        "name": "date_range",
        "label": "Date Range",
        "group": "62f15109aa2f90a2",
        "order": 2,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Start Date",
                "value": "start_date",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "End Date",
                "value": "end_date",
                "type": "date",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "start_date": "",
            "end_date": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 830,
        "y": 1120,
        "wires": [
            [
                "0a9d0e2a03636c45",
                "8a6e9e026ddf0cd9"
            ]
        ]
    },
    {
        "id": "0a9d0e2a03636c45",
        "type": "function",
        "z": "acebf30b628324b0",
        "name": "function 3",
        "func": "node.warn(msg.payload)\n// Extract the start_date and end_date from the incoming payload\nconst startDate = new Date(msg.payload.start_date);\nconst endDate = new Date(msg.payload.end_date);\n\n// Ensure the dates are formatted as YYYY-MM-DD\nmsg.params = [\n    startDate.toISOString().slice(0, 10), // Get date part only\n    endDate.toISOString().slice(0, 10)   // Get date part only\n];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 640,
        "wires": [
            [
                "13f418b52e17a709"
            ]
        ]
    },
    {
        "id": "758ca2d032400175",
        "type": "function",
        "z": "acebf30b628324b0",
        "name": "getVelocity",
        "func": "// The velocity data table\nconst velocityData = [\n    { ageRange: \"20 to 29\", gender: \"Male\", velocity: 1.36 },\n    { ageRange: \"20 to 29\", gender: \"Female\", velocity: 1.34 },\n    { ageRange: \"30 to 39\", gender: \"Male\", velocity: 1.43 },\n    { ageRange: \"30 to 39\", gender: \"Female\", velocity: 1.34 },\n    { ageRange: \"40 to 49\", gender: \"Male\", velocity: 1.43 },\n    { ageRange: \"40 to 49\", gender: \"Female\", velocity: 1.39 },\n    { ageRange: \"50 to 59\", gender: \"Male\", velocity: 1.43 },\n    { ageRange: \"50 to 59\", gender: \"Female\", velocity: 1.31 },\n    { ageRange: \"60 to 69\", gender: \"Male\", velocity: 1.34 },\n    { ageRange: \"60 to 69\", gender: \"Female\", velocity: 1.24 },\n    { ageRange: \"70 to 79\", gender: \"Male\", velocity: 1.26 },\n    { ageRange: \"70 to 79\", gender: \"Female\", velocity: 1.13 },\n    { ageRange: \"80 to 89\", gender: \"Male\", velocity: 0.97 },\n    { ageRange: \"80 to 89\", gender: \"Female\", velocity: 0.94 }\n];\n\n// Function to map real age to an age range\nfunction mapAgeToRange(realAge) {\n    if (realAge >= 20 && realAge <= 29) return \"20 to 29\";\n    if (realAge >= 30 && realAge <= 39) return \"30 to 39\";\n    if (realAge >= 40 && realAge <= 49) return \"40 to 49\";\n    if (realAge >= 50 && realAge <= 59) return \"50 to 59\";\n    if (realAge >= 60 && realAge <= 69) return \"60 to 69\";\n    if (realAge >= 70 && realAge <= 79) return \"70 to 79\";\n    if (realAge >= 80 && realAge <= 89) return \"80 to 89\";\n    return null; // Out of range\n}\n\n// Extract the parameters from the input\nconst realAge = msg.payload[0].age; // E.g., 32\nvar gender = msg.payload[0].gender; // E.g., \"Male\"\nif (gender == 0) {\n    gender = \"Male\";\n}\nelse {\n    gender = \"Female\";\n}\n\n// Map the real age to an age range\nconst ageRange = mapAgeToRange(realAge);\n\nif (!ageRange) {\n    msg.payload = { error: \"Age is out of the supported range (20 to 89).\" };\n    return msg;\n}\n\n// Find the matching velocity from the table\nconst result = velocityData.find(\n    entry => entry.ageRange === ageRange && entry.gender === gender\n);\n\n// Return the velocity or an error message if no match is found\nif (result) {\n    msg.payload = { velocity: result.velocity };\n} else {\n    msg.payload = { error: \"No matching velocity found for the given parameters.\" };\n}\nmsg.topic = \"velocity\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 760,
        "wires": [
            [
                "ffcbb3f685117911"
            ]
        ]
    },
    {
        "id": "52cc107c9ff69e12",
        "type": "function",
        "z": "acebf30b628324b0",
        "name": "compute",
        "func": "// Extract activity, user data, and velocity from msg.payload\nconst activities = msg.payload.activities; // Array of activities\nconst userData = msg.payload.userData[0]; // User information\nconst velocity = msg.payload.velocity.velocity; // Global velocity for all activities\n\n// Validate the input\nif (!Array.isArray(activities) || !userData || typeof velocity !== \"number\") {\n    msg.payload = { error: \"Invalid input data. Ensure activities, user data, and velocity are provided.\" };\n    return msg;\n}\n\n// User data\nconst weight = userData.weight; // In kilograms\nconst height = userData.height / 100; // Convert to meters\n\n// Get thresholds from flow context\nconst thresholds_values = flow.get('thresholds');\nnode.warn(thresholds_values)\nconst thresholds = {\n    daily: {\n        walk: thresholds_values.walking,\n        run: thresholds_values.running\n    },\n    weekly: {\n        walk: thresholds_values.walking * 7,\n        run: thresholds_values.running * 7\n    },\n    monthly: {\n        walk: thresholds_values.walking * 30,\n        run: thresholds_values.running * 30\n    }\n\n};\n\nif (!thresholds || !thresholds.daily) {\n    node.warn(\"Daily thresholds not set in flow context. Please configure thresholds through the Dashboard.\");\n    msg.payload = { error: \"Daily thresholds not set. Please configure thresholds through the Dashboard.\" };\n    return msg;\n}\n\n// Variables to store totals\nlet totalWalkDistance = 0; // in meters\nlet totalRunDistance = 0; // in meters\nlet walkDuration = 0; // in seconds\nlet runDuration = 0; // in seconds\nlet totalCaloriesBurnedWalking = 0;\nlet totalCaloriesBurnedRunning = 0;\n\n// Function to parse time string to seconds\nfunction parseTimeStringToSeconds(timeStr) {\n    // timeStr is in format \"HH:MM:SS.ssssss\"\n    const [hoursStr, minutesStr, secondsStr] = timeStr.split(':');\n    const hours = parseInt(hoursStr);\n    const minutes = parseInt(minutesStr);\n    let seconds = 0;\n    if (secondsStr.includes('.')) {\n        const [wholeSecondsStr, fractionStr] = secondsStr.split('.');\n        const wholeSeconds = parseInt(wholeSecondsStr);\n        const fraction = parseFloat('0.' + fractionStr);\n        seconds = wholeSeconds + fraction;\n    } else {\n        seconds = parseInt(secondsStr);\n    }\n    const totalSeconds = hours * 3600 + minutes * 60 + seconds;\n    return totalSeconds;\n}\n\n// Sort activities by time to ensure correct order\nactivities.sort((a, b) => parseTimeStringToSeconds(a.time) - parseTimeStringToSeconds(b.time));\n\n// Define maximum allowable duration between activity records (e.g., 5 minutes)\nconst maxDuration = 5 * 60; // 5 minutes in seconds\n\n// Process activities\nfor (let i = 0; i < activities.length - 1; i++) {\n    const currentActivity = activities[i];\n    const nextActivity = activities[i + 1];\n\n    const currentTime = parseTimeStringToSeconds(currentActivity.time);\n    const nextTime = parseTimeStringToSeconds(nextActivity.time);\n    let duration = nextTime - currentTime; // Duration in seconds\n\n    // Handle time crossing midnight\n    if (duration < 0) {\n        duration += 24 * 3600; // Add 24 hours in seconds\n    }\n\n    // If the gap between activities is too big, do not count this duration\n    if (duration > maxDuration) {\n        duration = 0;\n    }\n\n    if (duration > 0) {\n        if (currentActivity.activity === 0) {\n            // Walking\n            const walkVelocity = velocity; // Use the global velocity\n            const distance = walkVelocity * duration;\n            totalWalkDistance += distance;\n            walkDuration += duration;\n\n            // Calories calculation\n            const caloriesPerSecond =\n                0.035 * weight + ((walkVelocity ** 2) / height) * 0.029 * weight;\n            const caloriesBurned = caloriesPerSecond * duration;\n            totalCaloriesBurnedWalking += caloriesBurned;\n\n        } else if (currentActivity.activity === 1) {\n            // Running\n            const runVelocity = velocity * 2; // Running velocity is 2x walking velocity\n            const distance = runVelocity * duration;\n            totalRunDistance += distance;\n            runDuration += duration;\n\n            // Calories calculation\n            const caloriesPerSecond =\n                0.035 * weight + ((runVelocity ** 2) / height) * 0.029 * weight;\n            const caloriesBurned = caloriesPerSecond * duration;\n            totalCaloriesBurnedRunning += caloriesBurned;\n        }\n    }\n}\n\n// Convert durations to minutes\nconst walkDurationMinutes = walkDuration / 60;\nconst runDurationMinutes = runDuration / 60;\n\n// Compare to thresholds\nconst isActiveWalking = walkDurationMinutes >= thresholds.daily.walk;\nconst isActiveRunning = runDurationMinutes >= thresholds.daily.run;\n\n// Prepare the result\nmsg.payload = {\n    totalWalkDistance: (totalWalkDistance / 1000).toFixed(2), // In kilometers\n    totalRunDistance: (totalRunDistance / 1000).toFixed(2), // In kilometers\n    walkDuration: walkDurationMinutes.toFixed(2), // In minutes\n    runDuration: runDurationMinutes.toFixed(2), // In minutes\n    totalCaloriesBurnedWalking: totalCaloriesBurnedWalking.toFixed(2),\n    totalCaloriesBurnedRunning: totalCaloriesBurnedRunning.toFixed(2),\n    activityStatus: {\n        walking: isActiveWalking ? \"active\" : \"sedentary\",\n        running: isActiveRunning ? \"active\" : \"sedentary\"\n    }\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 640,
        "wires": [
            [
                "bad2002f2ef54b31",
                "215b5bc1046e4f3b",
                "04a3a04a84b32189",
                "7d56e3c485b96884",
                "3e55974f8303f5b3",
                "fd54e444a8e1e88d",
                "292cf0ea10b7014a",
                "3b933677af634d7e",
                "f8641075ce821613"
            ]
        ]
    },
    {
        "id": "13f418b52e17a709",
        "type": "postgresql",
        "z": "acebf30b628324b0",
        "name": "",
        "query": "SELECT time, activity\nFROM activity \nWHERE date BETWEEN $1 AND $2;",
        "postgreSQLConfig": "f77c186364b39603",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 590,
        "y": 640,
        "wires": [
            [
                "1cfafbebab71a9df",
                "cf1ba853ee42f528"
            ]
        ]
    },
    {
        "id": "ffcbb3f685117911",
        "type": "join",
        "z": "acebf30b628324b0",
        "name": "combine",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": true,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 970,
        "y": 720,
        "wires": [
            [
                "52cc107c9ff69e12",
                "bad2002f2ef54b31"
            ]
        ]
    },
    {
        "id": "dcbacccabfd6a2e5",
        "type": "change",
        "z": "acebf30b628324b0",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "userData",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 700,
        "wires": [
            [
                "ffcbb3f685117911"
            ]
        ]
    },
    {
        "id": "1cfafbebab71a9df",
        "type": "change",
        "z": "acebf30b628324b0",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "activities",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 640,
        "wires": [
            [
                "ffcbb3f685117911"
            ]
        ]
    },
    {
        "id": "215b5bc1046e4f3b",
        "type": "ui_text",
        "z": "acebf30b628324b0",
        "group": "62f15109aa2f90a2",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Walk Distance [km]",
        "format": "{{msg.payload.totalWalkDistance}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1370,
        "y": 500,
        "wires": []
    },
    {
        "id": "04a3a04a84b32189",
        "type": "ui_text",
        "z": "acebf30b628324b0",
        "group": "62f15109aa2f90a2",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Run Distance [km]",
        "format": "{{msg.payload.totalRunDistance}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1370,
        "y": 540,
        "wires": []
    },
    {
        "id": "7d56e3c485b96884",
        "type": "ui_text",
        "z": "acebf30b628324b0",
        "group": "62f15109aa2f90a2",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Walk Duration [mins]",
        "format": "{{msg.payload.walkDuration}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1380,
        "y": 580,
        "wires": []
    },
    {
        "id": "3e55974f8303f5b3",
        "type": "ui_text",
        "z": "acebf30b628324b0",
        "group": "62f15109aa2f90a2",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Run Duration [mins]",
        "format": "{{msg.payload.runDuration}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1380,
        "y": 620,
        "wires": []
    },
    {
        "id": "fd54e444a8e1e88d",
        "type": "ui_text",
        "z": "acebf30b628324b0",
        "group": "62f15109aa2f90a2",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Burned Calories Walking",
        "format": "{{msg.payload.totalCaloriesBurnedWalking}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1390,
        "y": 660,
        "wires": []
    },
    {
        "id": "292cf0ea10b7014a",
        "type": "ui_text",
        "z": "acebf30b628324b0",
        "group": "62f15109aa2f90a2",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Burned Calories Running",
        "format": "{{msg.payload.totalCaloriesBurnedRunning}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1390,
        "y": 700,
        "wires": []
    },
    {
        "id": "3b933677af634d7e",
        "type": "ui_text",
        "z": "acebf30b628324b0",
        "group": "62f15109aa2f90a2",
        "order": 8,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Walking Status",
        "format": "{{msg.payload.activityStatus.walking}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1360,
        "y": 740,
        "wires": []
    },
    {
        "id": "f8641075ce821613",
        "type": "ui_text",
        "z": "acebf30b628324b0",
        "group": "62f15109aa2f90a2",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Running Status",
        "format": "{{msg.payload.activityStatus.running}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1360,
        "y": 780,
        "wires": []
    },
    {
        "id": "3ee1584cd141907e",
        "type": "ui_form",
        "z": "acebf30b628324b0",
        "name": "",
        "label": "Activity Thresholds [mins+",
        "group": "b1abe26a640988f8",
        "order": 0,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Walking",
                "value": "walking",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Running",
                "value": "running",
                "type": "number",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "walking": "",
            "running": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 290,
        "y": 840,
        "wires": [
            [
                "a2590877835db57f"
            ]
        ]
    },
    {
        "id": "a2590877835db57f",
        "type": "change",
        "z": "acebf30b628324b0",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "thresholds",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "8efa6edb90320d35",
        "type": "change",
        "z": "acebf30b628324b0",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"start_date\":\"06-01-2023\",\"end_date\":\"07-01-2023\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 1120,
        "wires": [
            [
                "47a287049a3d14b7"
            ]
        ]
    },
    {
        "id": "cf1ba853ee42f528",
        "type": "debug",
        "z": "acebf30b628324b0",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 480,
        "wires": []
    }
]