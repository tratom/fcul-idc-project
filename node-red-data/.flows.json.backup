[
    {
        "id": "acebf30b628324b0",
        "type": "tab",
        "label": "Offline",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e2c48a538353d801",
        "type": "tab",
        "label": "Online",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "de5ee2193d03dd1b",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mosquitto",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "f77c186364b39603",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "postgres-db",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "health",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "postgres",
        "userFieldType": "str",
        "password": "root",
        "passwordFieldType": "str"
    },
    {
        "id": "8bd336bf9cb2e6f1",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "62f15109aa2f90a2",
        "type": "ui_group",
        "name": "Statistic",
        "tab": "4e4a2383db18e3c3",
        "order": 1,
        "disp": true,
        "width": 24,
        "collapse": false,
        "className": ""
    },
    {
        "id": "d18297c87373db73",
        "type": "ui_group",
        "name": "Statistics",
        "tab": "23362710de61490b",
        "order": 1,
        "disp": true,
        "width": 24,
        "collapse": false,
        "className": ""
    },
    {
        "id": "23362710de61490b",
        "type": "ui_tab",
        "name": "Online Data",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e1a2f045e06dfd7f",
        "type": "ui_group",
        "name": "Controls",
        "tab": "23362710de61490b",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4e4a2383db18e3c3",
        "type": "ui_tab",
        "name": "Offline Data",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "032063b9cbd6eb32",
        "type": "ui_group",
        "name": "Controls",
        "tab": "4e4a2383db18e3c3",
        "order": 3,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "0b2881757468b458",
        "type": "ui_ui_control",
        "z": "acebf30b628324b0",
        "name": "",
        "events": "all",
        "x": 80,
        "y": 160,
        "wires": [
            [
                "6d3919916a4145f1",
                "3ee1584cd141907e",
                "8efa6edb90320d35"
            ]
        ]
    },
    {
        "id": "6d3919916a4145f1",
        "type": "ui_form",
        "z": "acebf30b628324b0",
        "name": "user-data",
        "label": "User Data",
        "group": "032063b9cbd6eb32",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Age",
                "value": "age",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Height",
                "value": "height",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Weight",
                "value": "weight",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Gender",
                "value": "gender",
                "type": "number",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "age": "",
            "height": "",
            "weight": "",
            "gender": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 280,
        "y": 160,
        "wires": [
            [
                "a62adf6cdd8da95e"
            ]
        ]
    },
    {
        "id": "47a287049a3d14b7",
        "type": "ui_form",
        "z": "acebf30b628324b0",
        "name": "date_range",
        "label": "Date Range",
        "group": "032063b9cbd6eb32",
        "order": 3,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Start Date",
                "value": "start_date",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "End Date",
                "value": "end_date",
                "type": "date",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "start_date": "",
            "end_date": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 490,
        "y": 240,
        "wires": [
            [
                "0a9d0e2a03636c45",
                "758ca2d032400175"
            ]
        ]
    },
    {
        "id": "0a9d0e2a03636c45",
        "type": "function",
        "z": "acebf30b628324b0",
        "name": "function 3",
        "func": "// Extract the start_date and end_date from the incoming payload\nconst startDate = new Date(msg.payload.start_date);\nconst endDate = new Date(msg.payload.end_date);\n\n// Ensure the dates are formatted as YYYY-MM-DD\nmsg.params = [\n    startDate.toISOString().slice(0, 10), // Get date part only\n    endDate.toISOString().slice(0, 10)   // Get date part only\n];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 220,
        "wires": [
            [
                "13f418b52e17a709"
            ]
        ]
    },
    {
        "id": "758ca2d032400175",
        "type": "function",
        "z": "acebf30b628324b0",
        "name": "getVelocity",
        "func": "const user_data = flow.get('user_data');\n\n// The velocity data table\nconst velocityData = [\n    { ageRange: \"20 to 29\", gender: \"Male\", velocity: 1.36 },\n    { ageRange: \"20 to 29\", gender: \"Female\", velocity: 1.34 },\n    { ageRange: \"30 to 39\", gender: \"Male\", velocity: 1.43 },\n    { ageRange: \"30 to 39\", gender: \"Female\", velocity: 1.34 },\n    { ageRange: \"40 to 49\", gender: \"Male\", velocity: 1.43 },\n    { ageRange: \"40 to 49\", gender: \"Female\", velocity: 1.39 },\n    { ageRange: \"50 to 59\", gender: \"Male\", velocity: 1.43 },\n    { ageRange: \"50 to 59\", gender: \"Female\", velocity: 1.31 },\n    { ageRange: \"60 to 69\", gender: \"Male\", velocity: 1.34 },\n    { ageRange: \"60 to 69\", gender: \"Female\", velocity: 1.24 },\n    { ageRange: \"70 to 79\", gender: \"Male\", velocity: 1.26 },\n    { ageRange: \"70 to 79\", gender: \"Female\", velocity: 1.13 },\n    { ageRange: \"80 to 89\", gender: \"Male\", velocity: 0.97 },\n    { ageRange: \"80 to 89\", gender: \"Female\", velocity: 0.94 }\n];\n\n// Function to map real age to an age range\nfunction mapAgeToRange(realAge) {\n    if (realAge >= 20 && realAge <= 29) return \"20 to 29\";\n    if (realAge >= 30 && realAge <= 39) return \"30 to 39\";\n    if (realAge >= 40 && realAge <= 49) return \"40 to 49\";\n    if (realAge >= 50 && realAge <= 59) return \"50 to 59\";\n    if (realAge >= 60 && realAge <= 69) return \"60 to 69\";\n    if (realAge >= 70 && realAge <= 79) return \"70 to 79\";\n    if (realAge >= 80 && realAge <= 89) return \"80 to 89\";\n    return null; // Out of range\n}\n\n// Extract the parameters from the input\nconst realAge = user_data.age; // E.g., 32\nvar gender = user_data.gender; // E.g., \"Male\"\nif (gender == 0) {\n    gender = \"Male\";\n}\nelse {\n    gender = \"Female\";\n}\n\n// Map the real age to an age range\nconst ageRange = mapAgeToRange(realAge);\n\nif (!ageRange) {\n    msg.payload = { error: \"Age is out of the supported range (20 to 89).\" };\n    return msg;\n}\n\n// Find the matching velocity from the table\nconst result = velocityData.find(\n    entry => entry.ageRange === ageRange && entry.gender === gender\n);\n\n// Return the velocity or an error message if no match is found\nif (result) {\n    msg.payload = { velocity: result.velocity };\n} else {\n    msg.payload = { error: \"No matching velocity found for the given parameters.\" };\n}\nmsg.topic = \"velocity\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 260,
        "wires": [
            [
                "ffcbb3f685117911"
            ]
        ]
    },
    {
        "id": "52cc107c9ff69e12",
        "type": "function",
        "z": "acebf30b628324b0",
        "name": "compute",
        "func": "// Extract activity, user data, and velocity from msg.payload\nconst activities = msg.payload.activities; // Array of activities\nconst userData = flow.get(\"user_data\"); // User information\nconst velocity = msg.payload.velocity.velocity; // Global velocity for all activities\n\n// Validate the input\nif (!Array.isArray(activities) || !userData || typeof velocity !== \"number\") {\n    msg.payload = { error: \"Invalid input data. Ensure activities, user data, and velocity are provided.\" };\n    return msg;\n}\n\n// User data\nconst weight = userData.weight; // In kilograms\nconst height = userData.height / 100; // Convert to meters\n\n// Check thresholds\nconst thresholds_values = flow.get('thresholds');\nif (!thresholds_values || typeof thresholds_values.walking !== 'number' || typeof thresholds_values.running !== 'number') {\n    node.warn(\"Thresholds not set in flow context. Please configure thresholds through the Dashboard.\");\n    msg.payload = { error: \"Thresholds not set. Please configure thresholds through the Dashboard.\" };\n    return msg;\n}\n\n// Function to parse time string to seconds\nfunction parseTimeStringToSeconds(timeStr) {\n    // timeStr is in format \"HH:MM:SS.ssssss\"\n    const [hoursStr, minutesStr, secondsStr] = timeStr.split(':');\n    const hours = parseInt(hoursStr);\n    const minutes = parseInt(minutesStr);\n    let seconds = 0;\n    if (secondsStr.includes('.')) {\n        const [wholeSecondsStr, fractionStr] = secondsStr.split('.');\n        const wholeSeconds = parseInt(wholeSecondsStr);\n        const fraction = parseFloat('0.' + fractionStr);\n        seconds = wholeSeconds + fraction;\n    } else {\n        seconds = parseInt(secondsStr);\n    }\n    return hours * 3600 + minutes * 60 + seconds;\n}\n\n// Convert activity date/time to a single Date object\nfunction getActivityDateTime(activity) {\n    const baseDate = new Date(activity.date);\n    const totalSeconds = parseTimeStringToSeconds(activity.time);\n    const dateWithTime = new Date(baseDate.getTime() + totalSeconds * 1000);\n    return dateWithTime;\n}\n\n// Determine earliest and latest activity dates\nlet earliestDate = null;\nlet latestDate = null;\n\n// Convert all activity date/time into Date objects\nconst activitiesWithDate = activities.map(act => {\n    const dt = getActivityDateTime(act);\n    if (!earliestDate || dt < earliestDate) earliestDate = dt;\n    if (!latestDate || dt > latestDate) latestDate = dt;\n    return { ...act, dateTime: dt };\n});\n\nif (!earliestDate || !latestDate) {\n    msg.payload = { error: \"No valid activity dates found.\" };\n    return msg;\n}\n\n// Calculate daysInRange\nconst timeDiff = latestDate.getTime() - earliestDate.getTime();\nconst daysInRange = Math.max(1, Math.ceil(timeDiff / (1000 * 60 * 60 * 24)));\n\n// Multiply thresholds by the number of days in the range\nconst thresholds = {\n    walk: thresholds_values.walking * daysInRange,\n    run: thresholds_values.running * daysInRange\n};\n\n// Variables to store totals\nlet totalWalkDistance = 0; // in meters\nlet totalRunDistance = 0; // in meters\nlet walkDuration = 0; // in seconds\nlet runDuration = 0; // in seconds\nlet totalCaloriesBurnedWalking = 0;\nlet totalCaloriesBurnedRunning = 0;\n\n// A helper to get the day's start timestamp (midnight) for grouping\nfunction getDayStartTimestamp(date) {\n    return new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime();\n}\n\n// Daily stats object: { dayKey: { walkDistance, runDistance, walkDuration, runDuration, caloriesWalk, caloriesRun } }\nlet dailyStats = {};\n\nfunction ensureDayEntry(dayKey) {\n    if (!dailyStats[dayKey]) {\n        dailyStats[dayKey] = {\n            walkDistance: 0,\n            runDistance: 0,\n            walkDuration: 0,\n            runDuration: 0,\n            caloriesWalk: 0,\n            caloriesRun: 0\n        };\n    }\n}\n\n// Sort activities by their exact dateTime\nactivitiesWithDate.sort((a, b) => a.dateTime - b.dateTime);\n\n// Define maximum allowable duration between activity records (e.g., 5 minutes)\nconst maxDuration = 5 * 60; // 5 minutes in seconds\n\n// Process activities\nfor (let i = 0; i < activitiesWithDate.length - 1; i++) {\n    const currentActivity = activitiesWithDate[i];\n    const nextActivity = activitiesWithDate[i + 1];\n\n    const currentTime = currentActivity.dateTime.getTime() / 1000;\n    const nextTime = nextActivity.dateTime.getTime() / 1000;\n    let duration = nextTime - currentTime; // Duration in seconds\n\n    // If the gap between activities is too big, do not count this duration\n    if (duration > maxDuration) {\n        duration = 0;\n    }\n\n    if (duration > 0) {\n        const dayKey = getDayStartTimestamp(currentActivity.dateTime);\n\n        if (currentActivity.activity === 0) {\n            // Walking\n            const walkVelocity = velocity; // Use the global velocity\n            const distance = walkVelocity * duration;\n            totalWalkDistance += distance;\n            walkDuration += duration;\n\n            const caloriesPerSecond =\n                0.035 * weight + ((walkVelocity ** 2) / height) * 0.029 * weight;\n            const caloriesBurned = caloriesPerSecond * duration;\n            totalCaloriesBurnedWalking += caloriesBurned;\n\n            ensureDayEntry(dayKey);\n            dailyStats[dayKey].walkDistance += distance;\n            dailyStats[dayKey].walkDuration += duration;\n            dailyStats[dayKey].caloriesWalk += caloriesBurned;\n\n        } else if (currentActivity.activity === 1) {\n            // Running\n            const runVelocity = velocity * 2; // Running velocity is 2x walking velocity\n            const distance = runVelocity * duration;\n            totalRunDistance += distance;\n            runDuration += duration;\n\n            const caloriesPerSecond =\n                0.035 * weight + ((runVelocity ** 2) / height) * 0.029 * weight;\n            const caloriesBurned = caloriesPerSecond * duration;\n            totalCaloriesBurnedRunning += caloriesBurned;\n\n            ensureDayEntry(dayKey);\n            dailyStats[dayKey].runDistance += distance;\n            dailyStats[dayKey].runDuration += duration;\n            dailyStats[dayKey].caloriesRun += caloriesBurned;\n        }\n    }\n}\n\n// Convert total durations to minutes\nconst walkDurationMinutes = walkDuration / 60;\nconst runDurationMinutes = runDuration / 60;\n\n// Compare to thresholds\nconst isActiveWalking = walkDurationMinutes >= thresholds.walk;\nconst isActiveRunning = runDurationMinutes >= thresholds.run;\n\n// Sort the days in ascending order\nconst dayKeys = Object.keys(dailyStats).map(k => parseInt(k)).sort((a, b) => a - b);\n\n// Build data arrays for each metric\nconst walkDistanceData = [];\nconst runDistanceData = [];\nconst walkDurationData = [];\nconst runDurationData = [];\nconst caloriesWalkData = [];\nconst caloriesRunData = [];\n\nfor (const dayKey of dayKeys) {\n    const dayStat = dailyStats[dayKey];\n    walkDistanceData.push({ x: dayKey, y: (dayStat.walkDistance / 1000) }); // convert to km\n    runDistanceData.push({ x: dayKey, y: (dayStat.runDistance / 1000) }); // convert to km\n    walkDurationData.push({ x: dayKey, y: (dayStat.walkDuration / 60) }); // convert to minutes\n    runDurationData.push({ x: dayKey, y: (dayStat.runDuration / 60) }); // convert to minutes\n    caloriesWalkData.push({ x: dayKey, y: dayStat.caloriesWalk });\n    caloriesRunData.push({ x: dayKey, y: dayStat.caloriesRun });\n}\n\n// Prepare separate payloads for each metric\n// Each chart data structure: { series: [string], data: [ [ {x, y}, ... ] ], labels: [string] }\nconst walkDistanceChart = [{\n    series: [\"Walk Distance\"],\n    data: [walkDistanceData],\n    labels: [\"Walk Distance\"]\n}];\n\nconst runDistanceChart = [{\n    series: [\"Run Distance\"],\n    data: [runDistanceData],\n    labels: [\"Run Distance\"]\n}];\n\nconst walkDurationChart = [{\n    series: [\"Walk Duration\"],\n    data: [walkDurationData],\n    labels: [\"Walk Duration\"]\n}];\n\nconst runDurationChart = [{\n    series: [\"Run Duration\"],\n    data: [runDurationData],\n    labels: [\"Run Duration\"]\n}];\n\nconst caloriesWalkChart = [{\n    series: [\"Calories Walking\"],\n    data: [caloriesWalkData],\n    labels: [\"Calories Walking\"]\n}];\n\nconst caloriesRunChart = [{\n    series: [\"Calories Running\"],\n    data: [caloriesRunData],\n    labels: [\"Calories Running\"]\n}];\n\n// Also include the aggregate statistics in a separate object\nconst aggregate = {\n    totalWalkDistance: (totalWalkDistance / 1000).toFixed(2), // In kilometers\n    totalRunDistance: (totalRunDistance / 1000).toFixed(2), // In kilometers\n    walkDuration: walkDurationMinutes.toFixed(2), // In minutes\n    runDuration: runDurationMinutes.toFixed(2), // In minutes\n    totalCaloriesBurnedWalking: totalCaloriesBurnedWalking.toFixed(2),\n    totalCaloriesBurnedRunning: totalCaloriesBurnedRunning.toFixed(2),\n    daysInRange: daysInRange,\n    activityStatus: {\n        walking: isActiveWalking ? \"active\" : \"sedentary\",\n        running: isActiveRunning ? \"active\" : \"sedentary\"\n    }\n};\n\n// Now put them all together in a single payload object, but separated by metric\nmsg.payload = {\n    walkDistanceChart,\n    runDistanceChart,\n    walkDurationChart,\n    runDurationChart,\n    caloriesWalkChart,\n    caloriesRunChart,\n    aggregate\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 260,
        "wires": [
            [
                "215b5bc1046e4f3b",
                "04a3a04a84b32189",
                "7d56e3c485b96884",
                "3e55974f8303f5b3",
                "fd54e444a8e1e88d",
                "292cf0ea10b7014a",
                "3b933677af634d7e",
                "f8641075ce821613",
                "1ab0922030c7f638",
                "b55a0865b8e1b534",
                "3a640ec104a3982b",
                "67537e954dec5c3e",
                "bdbadbc0bf008389",
                "c94dfc52d47db55c",
                "1fe61399c4d7edc6"
            ]
        ]
    },
    {
        "id": "ffcbb3f685117911",
        "type": "join",
        "z": "acebf30b628324b0",
        "name": "combine",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1230,
        "y": 260,
        "wires": [
            [
                "52cc107c9ff69e12"
            ]
        ]
    },
    {
        "id": "1cfafbebab71a9df",
        "type": "change",
        "z": "acebf30b628324b0",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "activities",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 220,
        "wires": [
            [
                "ffcbb3f685117911"
            ]
        ]
    },
    {
        "id": "215b5bc1046e4f3b",
        "type": "ui_text",
        "z": "acebf30b628324b0",
        "group": "62f15109aa2f90a2",
        "order": 1,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "Total Walk Distance [km]",
        "format": "{{msg.payload.aggregate.totalWalkDistance}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1670,
        "y": 120,
        "wires": []
    },
    {
        "id": "04a3a04a84b32189",
        "type": "ui_text",
        "z": "acebf30b628324b0",
        "group": "62f15109aa2f90a2",
        "order": 5,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "Total Run Distance [km]",
        "format": "{{msg.payload.aggregate.totalRunDistance}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1670,
        "y": 160,
        "wires": []
    },
    {
        "id": "7d56e3c485b96884",
        "type": "ui_text",
        "z": "acebf30b628324b0",
        "group": "62f15109aa2f90a2",
        "order": 2,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "Total Walk Duration [mins]",
        "format": "{{msg.payload.aggregate.walkDuration}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1670,
        "y": 200,
        "wires": []
    },
    {
        "id": "3e55974f8303f5b3",
        "type": "ui_text",
        "z": "acebf30b628324b0",
        "group": "62f15109aa2f90a2",
        "order": 6,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "Total Run Duration [mins]",
        "format": "{{msg.payload.aggregate.runDuration}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1670,
        "y": 240,
        "wires": []
    },
    {
        "id": "fd54e444a8e1e88d",
        "type": "ui_text",
        "z": "acebf30b628324b0",
        "group": "62f15109aa2f90a2",
        "order": 9,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "Total Burned Calories Walking",
        "format": "{{msg.payload.aggregate.totalCaloriesBurnedWalking}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1690,
        "y": 280,
        "wires": []
    },
    {
        "id": "292cf0ea10b7014a",
        "type": "ui_text",
        "z": "acebf30b628324b0",
        "group": "62f15109aa2f90a2",
        "order": 10,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "Total Burned Calories Running",
        "format": "{{msg.payload.aggregate.totalCaloriesBurnedRunning}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1690,
        "y": 320,
        "wires": []
    },
    {
        "id": "3b933677af634d7e",
        "type": "ui_text",
        "z": "acebf30b628324b0",
        "group": "62f15109aa2f90a2",
        "order": 14,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "Total Walking Status",
        "format": "{{msg.payload.aggregate.activityStatus.walking}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1660,
        "y": 360,
        "wires": []
    },
    {
        "id": "f8641075ce821613",
        "type": "ui_text",
        "z": "acebf30b628324b0",
        "group": "62f15109aa2f90a2",
        "order": 13,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "Total Running Status",
        "format": "{{msg.payload.aggregate.activityStatus.running}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1660,
        "y": 400,
        "wires": []
    },
    {
        "id": "3ee1584cd141907e",
        "type": "ui_form",
        "z": "acebf30b628324b0",
        "name": "",
        "label": "Activity Thresholds [mins]",
        "group": "032063b9cbd6eb32",
        "order": 2,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Walking",
                "value": "walking",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Running",
                "value": "running",
                "type": "number",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "walking": "",
            "running": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 330,
        "y": 80,
        "wires": [
            [
                "a2590877835db57f"
            ]
        ]
    },
    {
        "id": "a2590877835db57f",
        "type": "change",
        "z": "acebf30b628324b0",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "thresholds",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "8efa6edb90320d35",
        "type": "change",
        "z": "acebf30b628324b0",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"start_date\":\"07-02-2023\",\"end_date\":\"08-11-2023\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 240,
        "wires": [
            [
                "47a287049a3d14b7"
            ]
        ]
    },
    {
        "id": "a62adf6cdd8da95e",
        "type": "change",
        "z": "acebf30b628324b0",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "user_data",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "13f418b52e17a709",
        "type": "postgresql",
        "z": "acebf30b628324b0",
        "name": "",
        "query": "SELECT date,time, activity\nFROM activity \nWHERE date BETWEEN $1 AND $2;",
        "postgreSQLConfig": "f77c186364b39603",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 870,
        "y": 220,
        "wires": [
            [
                "1cfafbebab71a9df"
            ]
        ]
    },
    {
        "id": "be7326b1df961927",
        "type": "ui_chart",
        "z": "acebf30b628324b0",
        "name": "",
        "group": "62f15109aa2f90a2",
        "order": 3,
        "width": 12,
        "height": 6,
        "label": "Walk Distance",
        "chartType": "line",
        "legend": "false",
        "xformat": "Y-M-D",
        "interpolate": "linear",
        "nodata": "Select a date range to get the data",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "4",
        "removeOlderPoints": "",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1640,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "1ab0922030c7f638",
        "type": "debug",
        "z": "acebf30b628324b0",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1620,
        "y": 440,
        "wires": []
    },
    {
        "id": "b55a0865b8e1b534",
        "type": "change",
        "z": "acebf30b628324b0",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.walkDistanceChart",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1370,
        "y": 480,
        "wires": [
            [
                "be7326b1df961927"
            ]
        ]
    },
    {
        "id": "217f7139aa267107",
        "type": "ui_chart",
        "z": "acebf30b628324b0",
        "name": "",
        "group": "62f15109aa2f90a2",
        "order": 7,
        "width": 12,
        "height": 6,
        "label": "Run Distance",
        "chartType": "line",
        "legend": "false",
        "xformat": "Y-M-D",
        "interpolate": "linear",
        "nodata": "Select a date range to get the data",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "4",
        "removeOlderPoints": "",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1640,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "3a640ec104a3982b",
        "type": "change",
        "z": "acebf30b628324b0",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.runDistanceChart",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1370,
        "y": 520,
        "wires": [
            [
                "217f7139aa267107"
            ]
        ]
    },
    {
        "id": "fe7c2cf68b42f134",
        "type": "ui_chart",
        "z": "acebf30b628324b0",
        "name": "",
        "group": "62f15109aa2f90a2",
        "order": 4,
        "width": 12,
        "height": 6,
        "label": "Walk Time",
        "chartType": "line",
        "legend": "false",
        "xformat": "Y-M-D",
        "interpolate": "linear",
        "nodata": "Select a date range to get the data",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "4",
        "removeOlderPoints": "",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1630,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "67537e954dec5c3e",
        "type": "change",
        "z": "acebf30b628324b0",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.walkDurationChart",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1370,
        "y": 560,
        "wires": [
            [
                "fe7c2cf68b42f134"
            ]
        ]
    },
    {
        "id": "60db9b6d4d42a914",
        "type": "ui_chart",
        "z": "acebf30b628324b0",
        "name": "",
        "group": "62f15109aa2f90a2",
        "order": 8,
        "width": 12,
        "height": 6,
        "label": "Run Time",
        "chartType": "line",
        "legend": "false",
        "xformat": "Y-M-D",
        "interpolate": "linear",
        "nodata": "Select a date range to get the data",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "4",
        "removeOlderPoints": "",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1620,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "bdbadbc0bf008389",
        "type": "change",
        "z": "acebf30b628324b0",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.runDurationChart",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1370,
        "y": 600,
        "wires": [
            [
                "60db9b6d4d42a914"
            ]
        ]
    },
    {
        "id": "2c7a7d1d59b25b9f",
        "type": "ui_chart",
        "z": "acebf30b628324b0",
        "name": "",
        "group": "62f15109aa2f90a2",
        "order": 11,
        "width": 12,
        "height": 6,
        "label": "Walk Calories",
        "chartType": "line",
        "legend": "false",
        "xformat": "Y-M-D",
        "interpolate": "linear",
        "nodata": "Select a date range to get the data",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "4",
        "removeOlderPoints": "",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1640,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "c94dfc52d47db55c",
        "type": "change",
        "z": "acebf30b628324b0",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.caloriesWalkChart",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1370,
        "y": 640,
        "wires": [
            [
                "2c7a7d1d59b25b9f"
            ]
        ]
    },
    {
        "id": "0c1807e6a2e6f24d",
        "type": "ui_chart",
        "z": "acebf30b628324b0",
        "name": "",
        "group": "62f15109aa2f90a2",
        "order": 12,
        "width": 12,
        "height": 6,
        "label": "Run Calories",
        "chartType": "line",
        "legend": "false",
        "xformat": "Y-M-D",
        "interpolate": "linear",
        "nodata": "Select a date range to get the data",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "4",
        "removeOlderPoints": "",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1630,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "1fe61399c4d7edc6",
        "type": "change",
        "z": "acebf30b628324b0",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.caloriesRunChart",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1370,
        "y": 680,
        "wires": [
            [
                "0c1807e6a2e6f24d"
            ]
        ]
    },
    {
        "id": "ec4b2c746a30f514",
        "type": "http request",
        "z": "e2c48a538353d801",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "app:8000/predict",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 270,
        "y": 340,
        "wires": [
            [
                "9f89ee5b5e6bb513",
                "f6db7143d156713a"
            ]
        ]
    },
    {
        "id": "b217840d8c2c0ef0",
        "type": "mqtt in",
        "z": "e2c48a538353d801",
        "name": "",
        "topic": "idc/FC64699",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "de5ee2193d03dd1b",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 90,
        "y": 340,
        "wires": [
            [
                "ec4b2c746a30f514"
            ]
        ]
    },
    {
        "id": "f6db7143d156713a",
        "type": "function",
        "z": "e2c48a538353d801",
        "name": "compute",
        "func": "// Load user data and thresholds from flow\nconst userData = flow.get(\"user_data\");\nconst thresholds_values = flow.get(\"thresholds\");\n\nif (!userData || !thresholds_values ||\n    typeof thresholds_values.walking !== 'number' ||\n    typeof thresholds_values.running !== 'number') {\n    msg.payload = { error: \"User data or thresholds not set. Please configure through the Dashboard.\" };\n    return msg;\n}\n\n// Extract the incoming data and prediction\nconst data = msg.payload.data;\nconst prediction = msg.payload.prediction;\nif (!data || !data.date || !data.time || typeof prediction !== 'number') {\n    msg.payload = { error: \"Invalid input data. Ensure date, time, and prediction are provided.\" };\n    return msg;\n}\n\n// User info and defaults\nconst weight = userData.weight;\nconst height = userData.height / 100; \nconst velocity = flow.get(\"current_velocity\") || 1.5; // Default or from flow\n\n// Helper functions\nfunction parseTimeStringToSeconds(timeStr) {\n    const [hoursStr, minutesStr, secondsStr] = timeStr.split(':');\n    const hours = parseInt(hoursStr);\n    const minutes = parseInt(minutesStr);\n    let seconds = 0;\n    if (secondsStr.includes('.')) {\n        const [wholeSecondsStr, fractionStr] = secondsStr.split('.');\n        const wholeSeconds = parseInt(wholeSecondsStr);\n        const fraction = parseFloat('0.' + fractionStr);\n        seconds = wholeSeconds + fraction;\n    } else {\n        seconds = parseInt(secondsStr);\n    }\n    return hours * 3600 + minutes * 60 + seconds;\n}\n\nfunction getActivityDateTime(dateStr, timeStr) {\n    const baseDate = new Date(dateStr); \n    const totalSeconds = parseTimeStringToSeconds(timeStr);\n    return new Date(baseDate.getTime() + totalSeconds * 1000);\n}\n\nfunction getDayStartTimestamp(date) {\n    return new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime();\n}\n\nfunction ensureDayEntry(dailyStats, dayKey) {\n    if (!dailyStats[dayKey]) {\n        dailyStats[dayKey] = {\n            walkDistance: 0,\n            runDistance: 0,\n            walkDuration: 0,\n            runDuration: 0,\n            caloriesWalk: 0,\n            caloriesRun: 0\n        };\n    }\n}\n\n// Load stored state from flow (if any)\nlet earliestDate = flow.get(\"earliestDate\") || null;\nlet latestDate = flow.get(\"latestDate\") || null;\nlet lastActivity = flow.get(\"lastActivity\") || null; // store last {dateTime, activity}\nlet dailyStats = flow.get(\"dailyStats\") || {};\nlet totalWalkDistance = flow.get(\"totalWalkDistance\") || 0;\nlet totalRunDistance = flow.get(\"totalRunDistance\") || 0;\nlet walkDuration = flow.get(\"walkDuration\") || 0;\nlet runDuration = flow.get(\"runDuration\") || 0;\nlet totalCaloriesBurnedWalking = flow.get(\"totalCaloriesBurnedWalking\") || 0;\nlet totalCaloriesBurnedRunning = flow.get(\"totalCaloriesBurnedRunning\") || 0;\n\n// Real-time chart arrays (cumulative)\nlet walkDistanceRealTimeData = flow.get(\"walkDistanceRealTimeData\") || [];\nlet runDistanceRealTimeData = flow.get(\"runDistanceRealTimeData\") || [];\nlet walkDurationRealTimeData = flow.get(\"walkDurationRealTimeData\") || [];\nlet runDurationRealTimeData = flow.get(\"runDurationRealTimeData\") || [];\nlet caloriesWalkRealTimeData = flow.get(\"caloriesWalkRealTimeData\") || [];\nlet caloriesRunRealTimeData = flow.get(\"caloriesRunRealTimeData\") || [];\n\n// Convert incoming data point to a DateTime\nconst currentDateTime = getActivityDateTime(data.date, data.time);\n\n// Update earliest and latest dates\nif (!earliestDate || currentDateTime < earliestDate) earliestDate = currentDateTime;\nif (!latestDate || currentDateTime > latestDate) latestDate = currentDateTime;\n\nconst maxDuration = 5 * 60; // 5 minutes in seconds\nif (lastActivity) {\n    const currentTime = currentDateTime.getTime() / 1000;\n    const lastTime = lastActivity.dateTime.getTime() / 1000;\n    let duration = currentTime - lastTime;\n\n    if (duration > maxDuration) {\n        duration = 0;\n    }\n\n    if (duration > 0) {\n        const activityType = prediction; // 0 = walk, 1 = run\n        const dayKey = getDayStartTimestamp(lastActivity.dateTime);\n        ensureDayEntry(dailyStats, dayKey);\n\n        if (activityType === 0) {\n            // Walking\n            const walkVelocity = velocity; \n            const distance = walkVelocity * duration;\n            totalWalkDistance += distance;\n            walkDuration += duration;\n            \n            const caloriesPerSecond =\n                0.035 * weight + ((walkVelocity ** 2) / height) * 0.029 * weight;\n            const caloriesBurned = caloriesPerSecond * duration;\n            totalCaloriesBurnedWalking += caloriesBurned;\n            \n            dailyStats[dayKey].walkDistance += distance;\n            dailyStats[dayKey].walkDuration += duration;\n            dailyStats[dayKey].caloriesWalk += caloriesBurned;\n\n        } else if (activityType === 1) {\n            // Running\n            const runVelocity = velocity * 2; \n            const distance = runVelocity * duration;\n            totalRunDistance += distance;\n            runDuration += duration;\n            \n            const caloriesPerSecond =\n                0.035 * weight + ((runVelocity ** 2) / height) * 0.029 * weight;\n            const caloriesBurned = caloriesPerSecond * duration;\n            totalCaloriesBurnedRunning += caloriesBurned;\n            \n            dailyStats[dayKey].runDistance += distance;\n            dailyStats[dayKey].runDuration += duration;\n            dailyStats[dayKey].caloriesRun += caloriesBurned;\n        }\n    }\n}\n\n// Update lastActivity\nlastActivity = { dateTime: currentDateTime, activity: prediction };\n\n// Recalculate daysInRange\nconst timeDiff = latestDate.getTime() - earliestDate.getTime();\nconst daysInRange = Math.max(1, Math.ceil(timeDiff / (1000 * 60 * 60 * 24)));\n\nconst thresholds = {\n    walk: thresholds_values.walking * daysInRange,\n    run: thresholds_values.running * daysInRange\n};\n\nconst walkDurationMinutes = walkDuration / 60;\nconst runDurationMinutes = runDuration / 60;\nconst isActiveWalking = walkDurationMinutes >= thresholds.walk;\nconst isActiveRunning = runDurationMinutes >= thresholds.run;\n\n// Sort the days for daily aggregates\nconst dayKeys = Object.keys(dailyStats).map(k => parseInt(k)).sort((a, b) => a - b);\n\n// Build daily data arrays\nconst walkDistanceData = [];\nconst runDistanceData = [];\nconst walkDurationData = [];\nconst runDurationData = [];\nconst caloriesWalkData = [];\nconst caloriesRunData = [];\n\nfor (const dayKey of dayKeys) {\n    const dayStat = dailyStats[dayKey];\n    walkDistanceData.push({ x: dayKey, y: (dayStat.walkDistance / 1000) }); \n    runDistanceData.push({ x: dayKey, y: (dayStat.runDistance / 1000) });\n    walkDurationData.push({ x: dayKey, y: (dayStat.walkDuration / 60) });\n    runDurationData.push({ x: dayKey, y: (dayStat.runDuration / 60) });\n    caloriesWalkData.push({ x: dayKey, y: dayStat.caloriesWalk });\n    caloriesRunData.push({ x: dayKey, y: dayStat.caloriesRun });\n}\n\n// Add a real-time data point at the current timestamp with cumulative totals\nconst currentTimestamp = currentDateTime.getTime();\nwalkDistanceRealTimeData.push({ x: currentTimestamp, y: (totalWalkDistance / 1000) });\nrunDistanceRealTimeData.push({ x: currentTimestamp, y: (totalRunDistance / 1000) });\nwalkDurationRealTimeData.push({ x: currentTimestamp, y: walkDurationMinutes });\nrunDurationRealTimeData.push({ x: currentTimestamp, y: runDurationMinutes });\ncaloriesWalkRealTimeData.push({ x: currentTimestamp, y: totalCaloriesBurnedWalking });\ncaloriesRunRealTimeData.push({ x: currentTimestamp, y: totalCaloriesBurnedRunning });\n\n// Prepare separate payloads for each metric - Daily Aggregates\nconst walkDistanceChart = [{\n    series: [\"Walk Distance\"],\n    data: [walkDistanceData],\n    labels: [\"Walk Distance\"]\n}];\n\nconst runDistanceChart = [{\n    series: [\"Run Distance\"],\n    data: [runDistanceData],\n    labels: [\"Run Distance\"]\n}];\n\nconst walkDurationChart = [{\n    series: [\"Walk Duration\"],\n    data: [walkDurationData],\n    labels: [\"Walk Duration\"]\n}];\n\nconst runDurationChart = [{\n    series: [\"Run Duration\"],\n    data: [runDurationData],\n    labels: [\"Run Duration\"]\n}];\n\nconst caloriesWalkChart = [{\n    series: [\"Calories Walking\"],\n    data: [caloriesWalkData],\n    labels: [\"Calories Walking\"]\n}];\n\nconst caloriesRunChart = [{\n    series: [\"Calories Running\"],\n    data: [caloriesRunData],\n    labels: [\"Calories Running\"]\n}];\n\n// Real-time Charts\nconst walkDistanceRealTimeChart = [{\n    series: [\"Walk Distance (Real-Time)\"],\n    data: [walkDistanceRealTimeData],\n    labels: [\"Walk Distance (Real-Time)\"]\n}];\n\nconst runDistanceRealTimeChart = [{\n    series: [\"Run Distance (Real-Time)\"],\n    data: [runDistanceRealTimeData],\n    labels: [\"Run Distance (Real-Time)\"]\n}];\n\nconst walkDurationRealTimeChart = [{\n    series: [\"Walk Duration (Real-Time)\"],\n    data: [walkDurationRealTimeData],\n    labels: [\"Walk Duration (Real-Time)\"]\n}];\n\nconst runDurationRealTimeChart = [{\n    series: [\"Run Duration (Real-Time)\"],\n    data: [runDurationRealTimeData],\n    labels: [\"Run Duration (Real-Time)\"]\n}];\n\nconst caloriesWalkRealTimeChart = [{\n    series: [\"Calories Walking (Real-Time)\"],\n    data: [caloriesWalkRealTimeData],\n    labels: [\"Calories Walking (Real-Time)\"]\n}];\n\nconst caloriesRunRealTimeChart = [{\n    series: [\"Calories Running (Real-Time)\"],\n    data: [caloriesRunRealTimeData],\n    labels: [\"Calories Running (Real-Time)\"]\n}];\n\n// Aggregate info\nconst aggregate = {\n    totalWalkDistance: (totalWalkDistance / 1000).toFixed(2),\n    totalRunDistance: (totalRunDistance / 1000).toFixed(2),\n    walkDuration: walkDurationMinutes.toFixed(2),\n    runDuration: runDurationMinutes.toFixed(2),\n    totalCaloriesBurnedWalking: totalCaloriesBurnedWalking.toFixed(2),\n    totalCaloriesBurnedRunning: totalCaloriesBurnedRunning.toFixed(2),\n    daysInRange: daysInRange,\n    activityStatus: {\n        walking: isActiveWalking ? \"active\" : \"sedentary\",\n        running: isActiveRunning ? \"active\" : \"sedentary\"\n    }\n};\n\n// Save updated state in flow\nflow.set(\"earliestDate\", earliestDate);\nflow.set(\"latestDate\", latestDate);\nflow.set(\"lastActivity\", lastActivity);\nflow.set(\"dailyStats\", dailyStats);\nflow.set(\"totalWalkDistance\", totalWalkDistance);\nflow.set(\"totalRunDistance\", totalRunDistance);\nflow.set(\"walkDuration\", walkDuration);\nflow.set(\"runDuration\", runDuration);\nflow.set(\"totalCaloriesBurnedWalking\", totalCaloriesBurnedWalking);\nflow.set(\"totalCaloriesBurnedRunning\", totalCaloriesBurnedRunning);\n\n// Store the real-time arrays as well\nflow.set(\"walkDistanceRealTimeData\", walkDistanceRealTimeData);\nflow.set(\"runDistanceRealTimeData\", runDistanceRealTimeData);\nflow.set(\"walkDurationRealTimeData\", walkDurationRealTimeData);\nflow.set(\"runDurationRealTimeData\", runDurationRealTimeData);\nflow.set(\"caloriesWalkRealTimeData\", caloriesWalkRealTimeData);\nflow.set(\"caloriesRunRealTimeData\", caloriesRunRealTimeData);\n\nmsg.payload = {\n    // Daily aggregates\n    walkDistanceChart,\n    runDistanceChart,\n    walkDurationChart,\n    runDurationChart,\n    caloriesWalkChart,\n    caloriesRunChart,\n    // Real-time charts\n    walkDistanceRealTimeChart,\n    runDistanceRealTimeChart,\n    walkDurationRealTimeChart,\n    runDurationRealTimeChart,\n    caloriesWalkRealTimeChart,\n    caloriesRunRealTimeChart,\n    // Aggregate info\n    aggregate\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 340,
        "wires": [
            [
                "8250c638c836aac4",
                "41ebf1644aa2e9ba",
                "faf7d8dfb369cbe4",
                "476b30f57fbe2a64",
                "fd44e85aeecfbae0",
                "a7f43f562bd0a46b",
                "531397fe46717a21",
                "c4af6e4e36efbdf3",
                "5b0ea8c841e9f4ff",
                "61d7543c20eab76c",
                "6090fbc8e130fd17",
                "1e31bb04cad1add3",
                "810eb08f55b80226",
                "f64db66f643a733f",
                "314040bdbdf99975"
            ]
        ]
    },
    {
        "id": "8250c638c836aac4",
        "type": "ui_text",
        "z": "e2c48a538353d801",
        "group": "d18297c87373db73",
        "order": 1,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "Total Walk Distance [km]",
        "format": "{{msg.payload.aggregate.totalWalkDistance}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1070,
        "y": 200,
        "wires": []
    },
    {
        "id": "41ebf1644aa2e9ba",
        "type": "ui_text",
        "z": "e2c48a538353d801",
        "group": "d18297c87373db73",
        "order": 5,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "Total Run Distance [km]",
        "format": "{{msg.payload.aggregate.totalRunDistance}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1070,
        "y": 240,
        "wires": []
    },
    {
        "id": "faf7d8dfb369cbe4",
        "type": "ui_text",
        "z": "e2c48a538353d801",
        "group": "d18297c87373db73",
        "order": 2,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "Total Walk Duration [mins]",
        "format": "{{msg.payload.aggregate.walkDuration}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1070,
        "y": 280,
        "wires": []
    },
    {
        "id": "476b30f57fbe2a64",
        "type": "ui_text",
        "z": "e2c48a538353d801",
        "group": "d18297c87373db73",
        "order": 6,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "Total Run Duration [mins]",
        "format": "{{msg.payload.aggregate.runDuration}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1070,
        "y": 320,
        "wires": []
    },
    {
        "id": "fd44e85aeecfbae0",
        "type": "ui_text",
        "z": "e2c48a538353d801",
        "group": "d18297c87373db73",
        "order": 9,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "Total Burned Calories Walking",
        "format": "{{msg.payload.aggregate.totalCaloriesBurnedWalking}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1090,
        "y": 360,
        "wires": []
    },
    {
        "id": "a7f43f562bd0a46b",
        "type": "ui_text",
        "z": "e2c48a538353d801",
        "group": "d18297c87373db73",
        "order": 10,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "Total Burned Calories Running",
        "format": "{{msg.payload.aggregate.totalCaloriesBurnedRunning}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1090,
        "y": 400,
        "wires": []
    },
    {
        "id": "531397fe46717a21",
        "type": "ui_text",
        "z": "e2c48a538353d801",
        "group": "d18297c87373db73",
        "order": 13,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "Total Walking Status",
        "format": "{{msg.payload.aggregate.activityStatus.walking}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1060,
        "y": 440,
        "wires": []
    },
    {
        "id": "c4af6e4e36efbdf3",
        "type": "ui_text",
        "z": "e2c48a538353d801",
        "group": "d18297c87373db73",
        "order": 14,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "Total Running Status",
        "format": "{{msg.payload.aggregate.activityStatus.running}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1060,
        "y": 480,
        "wires": []
    },
    {
        "id": "71f70d9e72934c1c",
        "type": "ui_form",
        "z": "e2c48a538353d801",
        "name": "user-data",
        "label": "User Data",
        "group": "e1a2f045e06dfd7f",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Age",
                "value": "age",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Height",
                "value": "height",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Weight",
                "value": "weight",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Gender",
                "value": "gender",
                "type": "number",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "age": "",
            "height": "",
            "weight": "",
            "gender": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 260,
        "y": 100,
        "wires": [
            [
                "831dc260262550c6",
                "4de65841ef138320"
            ]
        ]
    },
    {
        "id": "831dc260262550c6",
        "type": "change",
        "z": "e2c48a538353d801",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "user_data",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "cf3605de2fbefd79",
        "type": "ui_ui_control",
        "z": "e2c48a538353d801",
        "name": "",
        "events": "all",
        "x": 80,
        "y": 140,
        "wires": [
            [
                "71f70d9e72934c1c",
                "ef0f72cfdc66e022"
            ]
        ]
    },
    {
        "id": "ef0f72cfdc66e022",
        "type": "ui_form",
        "z": "e2c48a538353d801",
        "name": "",
        "label": "Activity Thresholds [mins]",
        "group": "e1a2f045e06dfd7f",
        "order": 2,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Walking",
                "value": "walking",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Running",
                "value": "running",
                "type": "number",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "walking": "",
            "running": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 310,
        "y": 180,
        "wires": [
            [
                "a99edb7a187f58c3"
            ]
        ]
    },
    {
        "id": "a99edb7a187f58c3",
        "type": "change",
        "z": "e2c48a538353d801",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "thresholds",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "4de65841ef138320",
        "type": "function",
        "z": "e2c48a538353d801",
        "name": "getVelocity",
        "func": "const user_data = flow.get('user_data');\n\n// The velocity data table\nconst velocityData = [\n    { ageRange: \"20 to 29\", gender: \"Male\", velocity: 1.36 },\n    { ageRange: \"20 to 29\", gender: \"Female\", velocity: 1.34 },\n    { ageRange: \"30 to 39\", gender: \"Male\", velocity: 1.43 },\n    { ageRange: \"30 to 39\", gender: \"Female\", velocity: 1.34 },\n    { ageRange: \"40 to 49\", gender: \"Male\", velocity: 1.43 },\n    { ageRange: \"40 to 49\", gender: \"Female\", velocity: 1.39 },\n    { ageRange: \"50 to 59\", gender: \"Male\", velocity: 1.43 },\n    { ageRange: \"50 to 59\", gender: \"Female\", velocity: 1.31 },\n    { ageRange: \"60 to 69\", gender: \"Male\", velocity: 1.34 },\n    { ageRange: \"60 to 69\", gender: \"Female\", velocity: 1.24 },\n    { ageRange: \"70 to 79\", gender: \"Male\", velocity: 1.26 },\n    { ageRange: \"70 to 79\", gender: \"Female\", velocity: 1.13 },\n    { ageRange: \"80 to 89\", gender: \"Male\", velocity: 0.97 },\n    { ageRange: \"80 to 89\", gender: \"Female\", velocity: 0.94 }\n];\n\n// Function to map real age to an age range\nfunction mapAgeToRange(realAge) {\n    if (realAge >= 20 && realAge <= 29) return \"20 to 29\";\n    if (realAge >= 30 && realAge <= 39) return \"30 to 39\";\n    if (realAge >= 40 && realAge <= 49) return \"40 to 49\";\n    if (realAge >= 50 && realAge <= 59) return \"50 to 59\";\n    if (realAge >= 60 && realAge <= 69) return \"60 to 69\";\n    if (realAge >= 70 && realAge <= 79) return \"70 to 79\";\n    if (realAge >= 80 && realAge <= 89) return \"80 to 89\";\n    return null; // Out of range\n}\n\n// Extract the parameters from the input\nconst realAge = user_data.age; // E.g., 32\nvar gender = user_data.gender; // E.g., \"Male\"\nif (gender == 0) {\n    gender = \"Male\";\n}\nelse {\n    gender = \"Female\";\n}\n\n// Map the real age to an age range\nconst ageRange = mapAgeToRange(realAge);\n\nif (!ageRange) {\n    msg.payload = { error: \"Age is out of the supported range (20 to 89).\" };\n    return msg;\n}\n\n// Find the matching velocity from the table\nconst result = velocityData.find(\n    entry => entry.ageRange === ageRange && entry.gender === gender\n);\n\n// Return the velocity or an error message if no match is found\nif (result) {\n    msg.payload = { velocity: result.velocity };\n} else {\n    msg.payload = { error: \"No matching velocity found for the given parameters.\" };\n}\nmsg.topic = \"velocity\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 40,
        "wires": [
            [
                "4aa521664d5945fb"
            ]
        ]
    },
    {
        "id": "4aa521664d5945fb",
        "type": "change",
        "z": "e2c48a538353d801",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "velocity",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "314040bdbdf99975",
        "type": "debug",
        "z": "e2c48a538353d801",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 520,
        "wires": []
    },
    {
        "id": "71556706acc55ee2",
        "type": "postgresql",
        "z": "e2c48a538353d801",
        "name": "",
        "query": "insert into \n  activity (\n    \"date\", \n    \"time\", \n    activity, \n    acceleration_x, \n    acceleration_y, \n    acceleration_z, \n    gyro_x, \n    gyro_y, \n    gyro_z\n  )\nvalues\n  (\n    $1, \n    $2, \n    $3, \n    $4, \n    $5, \n    $6, \n    $7, \n    $8, \n    $9\n  );",
        "postgreSQLConfig": "f77c186364b39603",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 810,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "9f89ee5b5e6bb513",
        "type": "function",
        "z": "e2c48a538353d801",
        "name": "function 5",
        "func": "msg.params = [\n    msg.payload.data.date,\n    msg.payload.data.time,\n    msg.payload.prediction,\n    msg.payload.data.acceleration_x,\n    msg.payload.data.acceleration_y,\n    msg.payload.data.acceleration_z,\n    msg.payload.data.gyro_x,\n    msg.payload.data.gyro_y,\n    msg.payload.data.gyro_z,\n\n]\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 280,
        "wires": [
            [
                "71556706acc55ee2"
            ]
        ]
    },
    {
        "id": "26b54c1cffc84464",
        "type": "ui_chart",
        "z": "e2c48a538353d801",
        "name": "",
        "group": "d18297c87373db73",
        "order": 3,
        "width": 12,
        "height": 6,
        "label": "Walk Distance",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Select a date range to get the data",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1040,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "5b0ea8c841e9f4ff",
        "type": "change",
        "z": "e2c48a538353d801",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.walkDistanceRealTimeData",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 560,
        "wires": [
            [
                "26b54c1cffc84464"
            ]
        ]
    },
    {
        "id": "9bfd68aea01f5e93",
        "type": "ui_chart",
        "z": "e2c48a538353d801",
        "name": "",
        "group": "d18297c87373db73",
        "order": 7,
        "width": 12,
        "height": 6,
        "label": "Run Distance",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Select a date range to get the data",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1040,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "61d7543c20eab76c",
        "type": "change",
        "z": "e2c48a538353d801",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.runDistanceChart",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 600,
        "wires": [
            [
                "9bfd68aea01f5e93"
            ]
        ]
    },
    {
        "id": "a42159cd9487207c",
        "type": "ui_chart",
        "z": "e2c48a538353d801",
        "name": "",
        "group": "d18297c87373db73",
        "order": 4,
        "width": 12,
        "height": 6,
        "label": "Walk Time",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Select a date range to get the data",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1030,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "6090fbc8e130fd17",
        "type": "change",
        "z": "e2c48a538353d801",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.walkDurationChart",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 640,
        "wires": [
            [
                "a42159cd9487207c"
            ]
        ]
    },
    {
        "id": "73fa2d3dbca1e3dd",
        "type": "ui_chart",
        "z": "e2c48a538353d801",
        "name": "",
        "group": "d18297c87373db73",
        "order": 8,
        "width": 12,
        "height": 6,
        "label": "Run Time",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Select a date range to get the data",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1020,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "1e31bb04cad1add3",
        "type": "change",
        "z": "e2c48a538353d801",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.runDurationRealTimeData",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 680,
        "wires": [
            [
                "73fa2d3dbca1e3dd"
            ]
        ]
    },
    {
        "id": "4813dc79c7aaa5f4",
        "type": "ui_chart",
        "z": "e2c48a538353d801",
        "name": "",
        "group": "d18297c87373db73",
        "order": 11,
        "width": 12,
        "height": 6,
        "label": "Walk Calories",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Select a date range to get the data",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1040,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "810eb08f55b80226",
        "type": "change",
        "z": "e2c48a538353d801",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.caloriesWalkChart",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 720,
        "wires": [
            [
                "4813dc79c7aaa5f4"
            ]
        ]
    },
    {
        "id": "b3c6b4d7a28ff4b4",
        "type": "ui_chart",
        "z": "e2c48a538353d801",
        "name": "",
        "group": "d18297c87373db73",
        "order": 12,
        "width": 12,
        "height": 6,
        "label": "Run Calories",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Select a date range to get the data",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1030,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "f64db66f643a733f",
        "type": "change",
        "z": "e2c48a538353d801",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.caloriesRunChart",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 760,
        "wires": [
            [
                "b3c6b4d7a28ff4b4"
            ]
        ]
    }
]